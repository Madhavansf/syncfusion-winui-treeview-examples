//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace Populating_Nodes_with_Bound_mode_UWP
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        private global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[50];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel";
            _typeNameTable[5] = "System.Collections.ObjectModel.ObservableCollection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>";
            _typeNameTable[6] = "System.Collections.ObjectModel.Collection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>";
            _typeNameTable[7] = "Populating_Nodes_with_Bound_mode_UWP.Folder";
            _typeNameTable[8] = "Syncfusion.UI.Xaml.Core.NotificationObject";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[11] = "Syncfusion.UI.Xaml.TreeView.SfTreeView";
            _typeNameTable[12] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[13] = "Syncfusion.UI.Xaml.TreeView.AutoExpandMode";
            _typeNameTable[14] = "System.Enum";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode";
            _typeNameTable[17] = "Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode";
            _typeNameTable[18] = "Syncfusion.UI.Xaml.TreeView.ExpanderPosition";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
            _typeNameTable[21] = "Double";
            _typeNameTable[22] = "Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection";
            _typeNameTable[23] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.TreeViewNode>";
            _typeNameTable[24] = "Syncfusion.UI.Xaml.TreeView.TreeViewNode";
            _typeNameTable[25] = "Int32";
            _typeNameTable[26] = "System.Nullable`1<Boolean>";
            _typeNameTable[27] = "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors";
            _typeNameTable[28] = "System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>";
            _typeNameTable[29] = "System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>";
            _typeNameTable[30] = "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor";
            _typeNameTable[31] = "System.Type";
            _typeNameTable[32] = "System.Reflection.MemberInfo";
            _typeNameTable[33] = "Syncfusion.UI.Xaml.TreeView.SelectionMode";
            _typeNameTable[34] = "System.Collections.ObjectModel.ObservableCollection`1<Object>";
            _typeNameTable[35] = "System.Collections.ObjectModel.Collection`1<Object>";
            _typeNameTable[36] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[38] = "Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger";
            _typeNameTable[39] = "Microsoft.UI.Xaml.Input.ICommand";
            _typeNameTable[40] = "Syncfusion.UI.Xaml.TreeView.CheckBoxMode";
            _typeNameTable[41] = "Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[43] = "Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController";
            _typeNameTable[44] = "Populating_Nodes_with_Bound_mode_UWP.MainPage";
            _typeNameTable[45] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[46] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[47] = "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter";
            _typeNameTable[48] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[49] = "Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter";

            _typeTable = new global::System.Type[50];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel);
            _typeTable[5] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>);
            _typeTable[6] = typeof(global::System.Collections.ObjectModel.Collection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>);
            _typeTable[7] = typeof(global::Populating_Nodes_with_Bound_mode_UWP.Folder);
            _typeTable[8] = typeof(global::Syncfusion.UI.Xaml.Core.NotificationObject);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[11] = typeof(global::Syncfusion.UI.Xaml.TreeView.SfTreeView);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[13] = typeof(global::Syncfusion.UI.Xaml.TreeView.AutoExpandMode);
            _typeTable[14] = typeof(global::System.Enum);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode);
            _typeTable[17] = typeof(global::Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode);
            _typeTable[18] = typeof(global::Syncfusion.UI.Xaml.TreeView.ExpanderPosition);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase);
            _typeTable[21] = typeof(global::System.Double);
            _typeTable[22] = typeof(global::Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection);
            _typeTable[23] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.TreeView.TreeViewNode>);
            _typeTable[24] = typeof(global::Syncfusion.UI.Xaml.TreeView.TreeViewNode);
            _typeTable[25] = typeof(global::System.Int32);
            _typeTable[26] = typeof(global::System.Nullable<global::System.Boolean>);
            _typeTable[27] = typeof(global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors);
            _typeTable[28] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>);
            _typeTable[29] = typeof(global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>);
            _typeTable[30] = typeof(global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor);
            _typeTable[31] = typeof(global::System.Type);
            _typeTable[32] = typeof(global::System.Reflection.MemberInfo);
            _typeTable[33] = typeof(global::Syncfusion.UI.Xaml.TreeView.SelectionMode);
            _typeTable[34] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>);
            _typeTable[35] = typeof(global::System.Collections.ObjectModel.Collection<global::System.Object>);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[38] = typeof(global::Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger);
            _typeTable[39] = typeof(global::Microsoft.UI.Xaml.Input.ICommand);
            _typeTable[40] = typeof(global::Syncfusion.UI.Xaml.TreeView.CheckBoxMode);
            _typeTable[41] = typeof(global::Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Media.SolidColorBrush);
            _typeTable[43] = typeof(global::Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController);
            _typeTable[44] = typeof(global::Populating_Nodes_with_Bound_mode_UWP.MainPage);
            _typeTable[45] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[46] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[47] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter);
            _typeTable[48] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[49] = typeof(global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_NodeWithImageViewModel() { return new global::Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel(); }
        private object Activate_5_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>(); }
        private object Activate_6_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>(); }
        private object Activate_7_Folder() { return new global::Populating_Nodes_with_Bound_mode_UWP.Folder(); }
        private object Activate_11_SfTreeView() { return new global::Syncfusion.UI.Xaml.TreeView.SfTreeView(); }
        private object Activate_22_TreeViewNodeCollection() { return new global::Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection(); }
        private object Activate_23_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.TreeView.TreeViewNode>(); }
        private object Activate_24_TreeViewNode() { return new global::Syncfusion.UI.Xaml.TreeView.TreeViewNode(); }
        private object Activate_27_HierarchyPropertyDescriptors() { return new global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors(); }
        private object Activate_28_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>(); }
        private object Activate_29_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>(); }
        private object Activate_30_HierarchyPropertyDescriptor() { return new global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor(); }
        private object Activate_34_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>(); }
        private object Activate_35_Collection() { return new global::System.Collections.ObjectModel.Collection<global::System.Object>(); }
        private object Activate_43_TreeViewDragDropController() { return new global::Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController(); }
        private object Activate_44_MainPage() { return new global::Populating_Nodes_with_Bound_mode_UWP.MainPage(); }
        private object Activate_47_DoubleToObjectConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter(); }
        private object Activate_49_DoubleToVisibilityConverter() { return new global::Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_5_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>)instance;
            var newItem = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)item;
            collection.Add(newItem);
        }
        private void VectorAdd_6_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Populating_Nodes_with_Bound_mode_UWP.Folder>)instance;
            var newItem = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)item;
            collection.Add(newItem);
        }
        private void VectorAdd_22_TreeViewNodeCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.TreeView.TreeViewNode>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.TreeView.TreeViewNode>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)item;
            collection.Add(newItem);
        }
        private void VectorAdd_27_HierarchyPropertyDescriptors(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)item;
            collection.Add(newItem);
        }
        private void VectorAdd_28_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>)instance;
            var newItem = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)item;
            collection.Add(newItem);
        }
        private void VectorAdd_34_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_35_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_NodeWithImageViewModel;
                userType.AddMemberName("Folders");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  System.Collections.ObjectModel.ObservableCollection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>"));
                userType.CollectionAdd = VectorAdd_5_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  System.Collections.ObjectModel.Collection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_6_Collection;
                userType.CollectionAdd = VectorAdd_6_Collection;
                xamlType = userType;
                break;

            case 7:   //  Populating_Nodes_with_Bound_mode_UWP.Folder
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Core.NotificationObject"));
                userType.Activator = Activate_7_Folder;
                userType.AddMemberName("Files");
                userType.AddMemberName("FileName");
                userType.AddMemberName("ImageTemplate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Syncfusion.UI.Xaml.Core.NotificationObject
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Syncfusion.UI.Xaml.TreeView.SfTreeView
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_11_SfTreeView;
                userType.AddMemberName("AutoExpandMode");
                userType.AddMemberName("IsAnimationEnabled");
                userType.AddMemberName("ChildPropertyName");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("NodePopulationMode");
                userType.AddMemberName("NotificationSubscriptionMode");
                userType.AddMemberName("ExpanderPosition");
                userType.AddMemberName("ExpanderTemplate");
                userType.AddMemberName("ExpanderTemplateSelector");
                userType.AddMemberName("ItemTemplateSelector");
                userType.AddMemberName("AllowEditing");
                userType.AddMemberName("EditTemplate");
                userType.AddMemberName("EditTemplateSelector");
                userType.AddMemberName("ItemContextFlyout");
                userType.AddMemberName("AllowDeleting");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("Indentation");
                userType.AddMemberName("Nodes");
                userType.AddMemberName("ExpanderWidth");
                userType.AddMemberName("HierarchyPropertyDescriptors");
                userType.AddMemberName("FullRowSelect");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("SelectedItems");
                userType.AddMemberName("CurrentItem");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionBackgroundColor");
                userType.AddMemberName("SelectionForegroundColor");
                userType.AddMemberName("FocusBorderColor");
                userType.AddMemberName("FocusBorderThickness");
                userType.AddMemberName("ExpandActionTrigger");
                userType.AddMemberName("LoadOnDemandCommand");
                userType.AddMemberName("CheckBoxMode");
                userType.AddMemberName("ItemTemplateDataContextType");
                userType.AddMemberName("CheckedItems");
                userType.AddMemberName("ShowLines");
                userType.AddMemberName("ShowRootLines");
                userType.AddMemberName("LineStroke");
                userType.AddMemberName("LineStrokeThickness");
                userType.AddMemberName("DragDropController");
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Syncfusion.UI.Xaml.TreeView.AutoExpandMode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.TreeView.AutoExpandMode.None);
                userType.AddEnumValue("RootNodes", global::Syncfusion.UI.Xaml.TreeView.AutoExpandMode.RootNodes);
                userType.AddEnumValue("AllNodes", global::Syncfusion.UI.Xaml.TreeView.AutoExpandMode.AllNodes);
                xamlType = userType;
                break;

            case 14:   //  System.Enum
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Instant", global::Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode.Instant);
                userType.AddEnumValue("OnDemand", global::Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode.OnDemand);
                xamlType = userType;
                break;

            case 17:   //  Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode.None);
                userType.AddEnumValue("CollectionChange", global::Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode.CollectionChange);
                userType.AddEnumValue("PropertyChange", global::Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode.PropertyChange);
                xamlType = userType;
                break;

            case 18:   //  Syncfusion.UI.Xaml.TreeView.ExpanderPosition
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Start", global::Syncfusion.UI.Xaml.TreeView.ExpanderPosition.Start);
                userType.AddEnumValue("End", global::Syncfusion.UI.Xaml.TreeView.ExpanderPosition.End);
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  Double
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.TreeViewNode>"));
                userType.CollectionAdd = VectorAdd_22_TreeViewNodeCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.TreeViewNode>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_23_Collection;
                userType.CollectionAdd = VectorAdd_23_Collection;
                xamlType = userType;
                break;

            case 24:   //  Syncfusion.UI.Xaml.TreeView.TreeViewNode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_TreeViewNode;
                userType.AddMemberName("ShowExpanderAnimation");
                userType.AddMemberName("Level");
                userType.AddMemberName("VisibleNodesCount");
                userType.AddMemberName("ChildNodes");
                userType.AddMemberName("ParentNode");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("IsChecked");
                userType.AddMemberName("Content");
                userType.AddMemberName("HasChildNodes");
                xamlType = userType;
                break;

            case 25:   //  Int32
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  System.Nullable`1<Boolean>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Boolean"));
                userType.BoxInstance = userType.BoxType<global::System.Boolean>;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>"));
                userType.CollectionAdd = VectorAdd_27_HierarchyPropertyDescriptors;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 28:   //  System.Collections.ObjectModel.ObservableCollection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>"));
                userType.Activator = Activate_28_ObservableCollection;
                userType.CollectionAdd = VectorAdd_28_ObservableCollection;
                xamlType = userType;
                break;

            case 29:   //  System.Collections.ObjectModel.Collection`1<Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_29_Collection;
                userType.CollectionAdd = VectorAdd_29_Collection;
                xamlType = userType;
                break;

            case 30:   //  Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_30_HierarchyPropertyDescriptor;
                userType.AddMemberName("TargetType");
                userType.AddMemberName("ChildPropertyName");
                userType.AddMemberName("IsExpandedPropertyName");
                xamlType = userType;
                break;

            case 31:   //  System.Type
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Reflection.MemberInfo"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  System.Reflection.MemberInfo
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 33:   //  Syncfusion.UI.Xaml.TreeView.SelectionMode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Single", global::Syncfusion.UI.Xaml.TreeView.SelectionMode.Single);
                userType.AddEnumValue("SingleDeselect", global::Syncfusion.UI.Xaml.TreeView.SelectionMode.SingleDeselect);
                userType.AddEnumValue("Multiple", global::Syncfusion.UI.Xaml.TreeView.SelectionMode.Multiple);
                userType.AddEnumValue("Extended", global::Syncfusion.UI.Xaml.TreeView.SelectionMode.Extended);
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.TreeView.SelectionMode.None);
                xamlType = userType;
                break;

            case 34:   //  System.Collections.ObjectModel.ObservableCollection`1<Object>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Object>"));
                userType.CollectionAdd = VectorAdd_34_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 35:   //  System.Collections.ObjectModel.Collection`1<Object>
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_35_Collection;
                userType.CollectionAdd = VectorAdd_35_Collection;
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Microsoft.UI.Xaml.Thickness
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 38:   //  Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Expander", global::Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger.Expander);
                userType.AddEnumValue("Node", global::Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger.Node);
                xamlType = userType;
                break;

            case 39:   //  Microsoft.UI.Xaml.Input.ICommand
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 40:   //  Syncfusion.UI.Xaml.TreeView.CheckBoxMode
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Syncfusion.UI.Xaml.TreeView.CheckBoxMode.None);
                userType.AddEnumValue("Individual", global::Syncfusion.UI.Xaml.TreeView.CheckBoxMode.Individual);
                userType.AddEnumValue("Recursive", global::Syncfusion.UI.Xaml.TreeView.CheckBoxMode.Recursive);
                xamlType = userType;
                break;

            case 41:   //  Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Node", global::Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType.Node);
                userType.AddEnumValue("Item", global::Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType.Item);
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 44:   //  Populating_Nodes_with_Bound_mode_UWP.MainPage
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_44_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Syncfusion.UI.Xaml.Core.DoubleToObjectConverter
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_47_DoubleToObjectConverter;
                userType.AddMemberName("TrueValue");
                userType.AddMemberName("FalseValue");
                userType.AddMemberName("NullValue");
                userType.AddMemberName("GreaterThan");
                userType.AddMemberName("LessThan");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 48:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Syncfusion.UI.Xaml.Core.DoubleToVisibilityConverter
                userType = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter"));
                userType.Activator = Activate_49_DoubleToVisibilityConverter;
                userType.SetIsBindable();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.Core.WinUI.Syncfusion_Core_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Syncfusion.TreeView.WinUI.Syncfusion_TreeView_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_NodeWithImageViewModel_Folders(object instance)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel)instance;
            return that.Folders;
        }
        private object get_2_Folder_Files(object instance)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)instance;
            return that.Files;
        }
        private object get_3_Folder_FileName(object instance)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)instance;
            return that.FileName;
        }
        private void set_3_Folder_FileName(object instance, object Value)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)instance;
            that.FileName = (global::System.String)Value;
        }
        private object get_4_Folder_ImageTemplate(object instance)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)instance;
            return that.ImageTemplate;
        }
        private void set_4_Folder_ImageTemplate(object instance, object Value)
        {
            var that = (global::Populating_Nodes_with_Bound_mode_UWP.Folder)instance;
            that.ImageTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_5_SfTreeView_AutoExpandMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.AutoExpandMode;
        }
        private void set_5_SfTreeView_AutoExpandMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.AutoExpandMode = (global::Syncfusion.UI.Xaml.TreeView.AutoExpandMode)Value;
        }
        private object get_6_SfTreeView_IsAnimationEnabled(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.IsAnimationEnabled;
        }
        private void set_6_SfTreeView_IsAnimationEnabled(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.IsAnimationEnabled = (global::System.Boolean)Value;
        }
        private object get_7_SfTreeView_ChildPropertyName(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ChildPropertyName;
        }
        private void set_7_SfTreeView_ChildPropertyName(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ChildPropertyName = (global::System.String)Value;
        }
        private object get_8_SfTreeView_ItemsSource(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemsSource;
        }
        private void set_8_SfTreeView_ItemsSource(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_9_SfTreeView_ItemTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemTemplate;
        }
        private void set_9_SfTreeView_ItemTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_10_SfTreeView_NodePopulationMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.NodePopulationMode;
        }
        private void set_10_SfTreeView_NodePopulationMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.NodePopulationMode = (global::Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode)Value;
        }
        private object get_11_SfTreeView_NotificationSubscriptionMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.NotificationSubscriptionMode;
        }
        private void set_11_SfTreeView_NotificationSubscriptionMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.NotificationSubscriptionMode = (global::Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode)Value;
        }
        private object get_12_SfTreeView_ExpanderPosition(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ExpanderPosition;
        }
        private void set_12_SfTreeView_ExpanderPosition(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ExpanderPosition = (global::Syncfusion.UI.Xaml.TreeView.ExpanderPosition)Value;
        }
        private object get_13_SfTreeView_ExpanderTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ExpanderTemplate;
        }
        private void set_13_SfTreeView_ExpanderTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ExpanderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_14_SfTreeView_ExpanderTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ExpanderTemplateSelector;
        }
        private void set_14_SfTreeView_ExpanderTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ExpanderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_15_SfTreeView_ItemTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemTemplateSelector;
        }
        private void set_15_SfTreeView_ItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_16_SfTreeView_AllowEditing(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.AllowEditing;
        }
        private void set_16_SfTreeView_AllowEditing(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.AllowEditing = (global::System.Boolean)Value;
        }
        private object get_17_SfTreeView_EditTemplate(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.EditTemplate;
        }
        private void set_17_SfTreeView_EditTemplate(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.EditTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_18_SfTreeView_EditTemplateSelector(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.EditTemplateSelector;
        }
        private void set_18_SfTreeView_EditTemplateSelector(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.EditTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_19_SfTreeView_ItemContextFlyout(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemContextFlyout;
        }
        private void set_19_SfTreeView_ItemContextFlyout(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemContextFlyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_20_SfTreeView_AllowDeleting(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.AllowDeleting;
        }
        private void set_20_SfTreeView_AllowDeleting(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.AllowDeleting = (global::System.Boolean)Value;
        }
        private object get_21_SfTreeView_ItemHeight(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemHeight;
        }
        private void set_21_SfTreeView_ItemHeight(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_22_SfTreeView_Indentation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.Indentation;
        }
        private void set_22_SfTreeView_Indentation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.Indentation = (global::System.Double)Value;
        }
        private object get_23_SfTreeView_Nodes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.Nodes;
        }
        private void set_23_SfTreeView_Nodes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.Nodes = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection)Value;
        }
        private object get_24_TreeViewNode_ShowExpanderAnimation(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.ShowExpanderAnimation;
        }
        private void set_24_TreeViewNode_ShowExpanderAnimation(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.ShowExpanderAnimation = (global::System.Boolean)Value;
        }
        private object get_25_TreeViewNode_Level(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.Level;
        }
        private object get_26_TreeViewNode_VisibleNodesCount(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.VisibleNodesCount;
        }
        private object get_27_TreeViewNode_ChildNodes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.ChildNodes;
        }
        private void set_27_TreeViewNode_ChildNodes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.ChildNodes = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection)Value;
        }
        private object get_28_TreeViewNode_ParentNode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.ParentNode;
        }
        private object get_29_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_29_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_30_TreeViewNode_IsChecked(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.IsChecked;
        }
        private void set_30_TreeViewNode_IsChecked(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.IsChecked = (global::System.Nullable<global::System.Boolean>)Value;
        }
        private object get_31_TreeViewNode_Content(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.Content;
        }
        private void set_31_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_32_TreeViewNode_HasChildNodes(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            return that.HasChildNodes;
        }
        private void set_32_TreeViewNode_HasChildNodes(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.TreeViewNode)instance;
            that.HasChildNodes = (global::System.Boolean)Value;
        }
        private object get_33_SfTreeView_ExpanderWidth(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ExpanderWidth;
        }
        private void set_33_SfTreeView_ExpanderWidth(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ExpanderWidth = (global::System.Double)Value;
        }
        private object get_34_SfTreeView_HierarchyPropertyDescriptors(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.HierarchyPropertyDescriptors;
        }
        private void set_34_SfTreeView_HierarchyPropertyDescriptors(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.HierarchyPropertyDescriptors = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors)Value;
        }
        private object get_35_HierarchyPropertyDescriptor_TargetType(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            return that.TargetType;
        }
        private void set_35_HierarchyPropertyDescriptor_TargetType(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            that.TargetType = (global::System.Type)Value;
        }
        private object get_36_HierarchyPropertyDescriptor_ChildPropertyName(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            return that.ChildPropertyName;
        }
        private void set_36_HierarchyPropertyDescriptor_ChildPropertyName(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            that.ChildPropertyName = (global::System.String)Value;
        }
        private object get_37_HierarchyPropertyDescriptor_IsExpandedPropertyName(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            return that.IsExpandedPropertyName;
        }
        private void set_37_HierarchyPropertyDescriptor_IsExpandedPropertyName(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor)instance;
            that.IsExpandedPropertyName = (global::System.String)Value;
        }
        private object get_38_SfTreeView_FullRowSelect(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.FullRowSelect;
        }
        private void set_38_SfTreeView_FullRowSelect(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.FullRowSelect = (global::System.Boolean)Value;
        }
        private object get_39_SfTreeView_SelectionMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.SelectionMode;
        }
        private void set_39_SfTreeView_SelectionMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.SelectionMode = (global::Syncfusion.UI.Xaml.TreeView.SelectionMode)Value;
        }
        private object get_40_SfTreeView_SelectedItems(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.SelectedItems;
        }
        private void set_40_SfTreeView_SelectedItems(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.SelectedItems = (global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>)Value;
        }
        private object get_41_SfTreeView_CurrentItem(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.CurrentItem;
        }
        private void set_41_SfTreeView_CurrentItem(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.CurrentItem = (global::System.Object)Value;
        }
        private object get_42_SfTreeView_SelectedItem(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.SelectedItem;
        }
        private void set_42_SfTreeView_SelectedItem(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_43_SfTreeView_SelectionBackgroundColor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.SelectionBackgroundColor;
        }
        private void set_43_SfTreeView_SelectionBackgroundColor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.SelectionBackgroundColor = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_44_SfTreeView_SelectionForegroundColor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.SelectionForegroundColor;
        }
        private void set_44_SfTreeView_SelectionForegroundColor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.SelectionForegroundColor = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_45_SfTreeView_FocusBorderColor(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.FocusBorderColor;
        }
        private void set_45_SfTreeView_FocusBorderColor(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.FocusBorderColor = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_46_SfTreeView_FocusBorderThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.FocusBorderThickness;
        }
        private void set_46_SfTreeView_FocusBorderThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.FocusBorderThickness = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_47_SfTreeView_ExpandActionTrigger(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ExpandActionTrigger;
        }
        private void set_47_SfTreeView_ExpandActionTrigger(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ExpandActionTrigger = (global::Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger)Value;
        }
        private object get_48_SfTreeView_LoadOnDemandCommand(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.LoadOnDemandCommand;
        }
        private void set_48_SfTreeView_LoadOnDemandCommand(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.LoadOnDemandCommand = (global::Microsoft.UI.Xaml.Input.ICommand)Value;
        }
        private object get_49_SfTreeView_CheckBoxMode(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.CheckBoxMode;
        }
        private void set_49_SfTreeView_CheckBoxMode(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.CheckBoxMode = (global::Syncfusion.UI.Xaml.TreeView.CheckBoxMode)Value;
        }
        private object get_50_SfTreeView_ItemTemplateDataContextType(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ItemTemplateDataContextType;
        }
        private void set_50_SfTreeView_ItemTemplateDataContextType(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ItemTemplateDataContextType = (global::Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType)Value;
        }
        private object get_51_SfTreeView_CheckedItems(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.CheckedItems;
        }
        private void set_51_SfTreeView_CheckedItems(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.CheckedItems = (global::System.Collections.ObjectModel.ObservableCollection<global::System.Object>)Value;
        }
        private object get_52_SfTreeView_ShowLines(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ShowLines;
        }
        private void set_52_SfTreeView_ShowLines(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ShowLines = (global::System.Boolean)Value;
        }
        private object get_53_SfTreeView_ShowRootLines(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.ShowRootLines;
        }
        private void set_53_SfTreeView_ShowRootLines(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.ShowRootLines = (global::System.Boolean)Value;
        }
        private object get_54_SfTreeView_LineStroke(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.LineStroke;
        }
        private void set_54_SfTreeView_LineStroke(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.LineStroke = (global::Microsoft.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_55_SfTreeView_LineStrokeThickness(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.LineStrokeThickness;
        }
        private void set_55_SfTreeView_LineStrokeThickness(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.LineStrokeThickness = (global::System.Double)Value;
        }
        private object get_56_SfTreeView_DragDropController(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            return that.DragDropController;
        }
        private void set_56_SfTreeView_DragDropController(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.TreeView.SfTreeView)instance;
            that.DragDropController = (global::Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController)Value;
        }
        private object get_57_DoubleToObjectConverter_TrueValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.TrueValue;
        }
        private void set_57_DoubleToObjectConverter_TrueValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.TrueValue = (global::System.Object)Value;
        }
        private object get_58_DoubleToObjectConverter_FalseValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.FalseValue;
        }
        private void set_58_DoubleToObjectConverter_FalseValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.FalseValue = (global::System.Object)Value;
        }
        private object get_59_DoubleToObjectConverter_NullValue(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.NullValue;
        }
        private void set_59_DoubleToObjectConverter_NullValue(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.NullValue = (global::System.Object)Value;
        }
        private object get_60_DoubleToObjectConverter_GreaterThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.GreaterThan;
        }
        private void set_60_DoubleToObjectConverter_GreaterThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.GreaterThan = (global::System.Double)Value;
        }
        private object get_61_DoubleToObjectConverter_LessThan(object instance)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            return that.LessThan;
        }
        private void set_61_DoubleToObjectConverter_LessThan(object instance, object Value)
        {
            var that = (global::Syncfusion.UI.Xaml.Core.DoubleToObjectConverter)instance;
            that.LessThan = (global::System.Double)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember xamlMember = null;
            global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel.Folders":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Populating_Nodes_with_Bound_mode_UWP.NodeWithImageViewModel");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Folders", "System.Collections.ObjectModel.ObservableCollection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>");
                xamlMember.Getter = get_1_NodeWithImageViewModel_Folders;
                xamlMember.SetIsReadOnly();
                break;
            case "Populating_Nodes_with_Bound_mode_UWP.Folder.Files":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Populating_Nodes_with_Bound_mode_UWP.Folder");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Files", "System.Collections.ObjectModel.ObservableCollection`1<Populating_Nodes_with_Bound_mode_UWP.Folder>");
                xamlMember.Getter = get_2_Folder_Files;
                xamlMember.SetIsReadOnly();
                break;
            case "Populating_Nodes_with_Bound_mode_UWP.Folder.FileName":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Populating_Nodes_with_Bound_mode_UWP.Folder");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "FileName", "String");
                xamlMember.Getter = get_3_Folder_FileName;
                xamlMember.Setter = set_3_Folder_FileName;
                break;
            case "Populating_Nodes_with_Bound_mode_UWP.Folder.ImageTemplate":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Populating_Nodes_with_Bound_mode_UWP.Folder");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ImageTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.Getter = get_4_Folder_ImageTemplate;
                xamlMember.Setter = set_4_Folder_ImageTemplate;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.AutoExpandMode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "AutoExpandMode", "Syncfusion.UI.Xaml.TreeView.AutoExpandMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_SfTreeView_AutoExpandMode;
                xamlMember.Setter = set_5_SfTreeView_AutoExpandMode;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.IsAnimationEnabled":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "IsAnimationEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_SfTreeView_IsAnimationEnabled;
                xamlMember.Setter = set_6_SfTreeView_IsAnimationEnabled;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ChildPropertyName":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ChildPropertyName", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_SfTreeView_ChildPropertyName;
                xamlMember.Setter = set_7_SfTreeView_ChildPropertyName;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemsSource":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_SfTreeView_ItemsSource;
                xamlMember.Setter = set_8_SfTreeView_ItemsSource;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemTemplate":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_SfTreeView_ItemTemplate;
                xamlMember.Setter = set_9_SfTreeView_ItemTemplate;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.NodePopulationMode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "NodePopulationMode", "Syncfusion.UI.Xaml.TreeView.TreeNodePopulationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_SfTreeView_NodePopulationMode;
                xamlMember.Setter = set_10_SfTreeView_NodePopulationMode;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.NotificationSubscriptionMode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "NotificationSubscriptionMode", "Syncfusion.UI.Xaml.TreeView.NotificationSubscriptionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_SfTreeView_NotificationSubscriptionMode;
                xamlMember.Setter = set_11_SfTreeView_NotificationSubscriptionMode;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ExpanderPosition":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ExpanderPosition", "Syncfusion.UI.Xaml.TreeView.ExpanderPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_SfTreeView_ExpanderPosition;
                xamlMember.Setter = set_12_SfTreeView_ExpanderPosition;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ExpanderTemplate":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ExpanderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_SfTreeView_ExpanderTemplate;
                xamlMember.Setter = set_13_SfTreeView_ExpanderTemplate;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ExpanderTemplateSelector":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ExpanderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_SfTreeView_ExpanderTemplateSelector;
                xamlMember.Setter = set_14_SfTreeView_ExpanderTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemTemplateSelector":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_SfTreeView_ItemTemplateSelector;
                xamlMember.Setter = set_15_SfTreeView_ItemTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.AllowEditing":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "AllowEditing", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_SfTreeView_AllowEditing;
                xamlMember.Setter = set_16_SfTreeView_AllowEditing;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.EditTemplate":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "EditTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_SfTreeView_EditTemplate;
                xamlMember.Setter = set_17_SfTreeView_EditTemplate;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.EditTemplateSelector":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "EditTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_SfTreeView_EditTemplateSelector;
                xamlMember.Setter = set_18_SfTreeView_EditTemplateSelector;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemContextFlyout":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemContextFlyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_SfTreeView_ItemContextFlyout;
                xamlMember.Setter = set_19_SfTreeView_ItemContextFlyout;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.AllowDeleting":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "AllowDeleting", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_SfTreeView_AllowDeleting;
                xamlMember.Setter = set_20_SfTreeView_AllowDeleting;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemHeight":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_SfTreeView_ItemHeight;
                xamlMember.Setter = set_21_SfTreeView_ItemHeight;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.Indentation":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Indentation", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_SfTreeView_Indentation;
                xamlMember.Setter = set_22_SfTreeView_Indentation;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.Nodes":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Nodes", "Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_SfTreeView_Nodes;
                xamlMember.Setter = set_23_SfTreeView_Nodes;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.ShowExpanderAnimation":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ShowExpanderAnimation", "Boolean");
                xamlMember.Getter = get_24_TreeViewNode_ShowExpanderAnimation;
                xamlMember.Setter = set_24_TreeViewNode_ShowExpanderAnimation;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.Level":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Level", "Int32");
                xamlMember.Getter = get_25_TreeViewNode_Level;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.VisibleNodesCount":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "VisibleNodesCount", "Int32");
                xamlMember.Getter = get_26_TreeViewNode_VisibleNodesCount;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.ChildNodes":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ChildNodes", "Syncfusion.UI.Xaml.TreeView.TreeViewNodeCollection");
                xamlMember.Getter = get_27_TreeViewNode_ChildNodes;
                xamlMember.Setter = set_27_TreeViewNode_ChildNodes;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.ParentNode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ParentNode", "Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember.Getter = get_28_TreeViewNode_ParentNode;
                xamlMember.SetIsReadOnly();
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.IsExpanded":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.Getter = get_29_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_29_TreeViewNode_IsExpanded;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.IsChecked":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "IsChecked", "System.Nullable`1<Boolean>");
                xamlMember.Getter = get_30_TreeViewNode_IsChecked;
                xamlMember.Setter = set_30_TreeViewNode_IsChecked;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.Content":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.Getter = get_31_TreeViewNode_Content;
                xamlMember.Setter = set_31_TreeViewNode_Content;
                break;
            case "Syncfusion.UI.Xaml.TreeView.TreeViewNode.HasChildNodes":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.TreeViewNode");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "HasChildNodes", "Boolean");
                xamlMember.Getter = get_32_TreeViewNode_HasChildNodes;
                xamlMember.Setter = set_32_TreeViewNode_HasChildNodes;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ExpanderWidth":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ExpanderWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_SfTreeView_ExpanderWidth;
                xamlMember.Setter = set_33_SfTreeView_ExpanderWidth;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.HierarchyPropertyDescriptors":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "HierarchyPropertyDescriptors", "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptors");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_SfTreeView_HierarchyPropertyDescriptors;
                xamlMember.Setter = set_34_SfTreeView_HierarchyPropertyDescriptors;
                break;
            case "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor.TargetType":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "TargetType", "System.Type");
                xamlMember.Getter = get_35_HierarchyPropertyDescriptor_TargetType;
                xamlMember.Setter = set_35_HierarchyPropertyDescriptor_TargetType;
                break;
            case "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor.ChildPropertyName":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ChildPropertyName", "String");
                xamlMember.Getter = get_36_HierarchyPropertyDescriptor_ChildPropertyName;
                xamlMember.Setter = set_36_HierarchyPropertyDescriptor_ChildPropertyName;
                break;
            case "Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor.IsExpandedPropertyName":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.HierarchyPropertyDescriptor");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "IsExpandedPropertyName", "String");
                xamlMember.Getter = get_37_HierarchyPropertyDescriptor_IsExpandedPropertyName;
                xamlMember.Setter = set_37_HierarchyPropertyDescriptor_IsExpandedPropertyName;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.FullRowSelect":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "FullRowSelect", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_SfTreeView_FullRowSelect;
                xamlMember.Setter = set_38_SfTreeView_FullRowSelect;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.SelectionMode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "SelectionMode", "Syncfusion.UI.Xaml.TreeView.SelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_SfTreeView_SelectionMode;
                xamlMember.Setter = set_39_SfTreeView_SelectionMode;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.SelectedItems":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "SelectedItems", "System.Collections.ObjectModel.ObservableCollection`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_SfTreeView_SelectedItems;
                xamlMember.Setter = set_40_SfTreeView_SelectedItems;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.CurrentItem":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "CurrentItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_SfTreeView_CurrentItem;
                xamlMember.Setter = set_41_SfTreeView_CurrentItem;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.SelectedItem":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_SfTreeView_SelectedItem;
                xamlMember.Setter = set_42_SfTreeView_SelectedItem;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.SelectionBackgroundColor":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "SelectionBackgroundColor", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_SfTreeView_SelectionBackgroundColor;
                xamlMember.Setter = set_43_SfTreeView_SelectionBackgroundColor;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.SelectionForegroundColor":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "SelectionForegroundColor", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_SfTreeView_SelectionForegroundColor;
                xamlMember.Setter = set_44_SfTreeView_SelectionForegroundColor;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.FocusBorderColor":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "FocusBorderColor", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_SfTreeView_FocusBorderColor;
                xamlMember.Setter = set_45_SfTreeView_FocusBorderColor;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.FocusBorderThickness":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "FocusBorderThickness", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_SfTreeView_FocusBorderThickness;
                xamlMember.Setter = set_46_SfTreeView_FocusBorderThickness;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ExpandActionTrigger":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ExpandActionTrigger", "Syncfusion.UI.Xaml.TreeView.ExpandActionTrigger");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_SfTreeView_ExpandActionTrigger;
                xamlMember.Setter = set_47_SfTreeView_ExpandActionTrigger;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.LoadOnDemandCommand":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "LoadOnDemandCommand", "Microsoft.UI.Xaml.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_SfTreeView_LoadOnDemandCommand;
                xamlMember.Setter = set_48_SfTreeView_LoadOnDemandCommand;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.CheckBoxMode":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "CheckBoxMode", "Syncfusion.UI.Xaml.TreeView.CheckBoxMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_SfTreeView_CheckBoxMode;
                xamlMember.Setter = set_49_SfTreeView_CheckBoxMode;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ItemTemplateDataContextType":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ItemTemplateDataContextType", "Syncfusion.UI.Xaml.TreeView.ItemTemplateDataContextType");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_SfTreeView_ItemTemplateDataContextType;
                xamlMember.Setter = set_50_SfTreeView_ItemTemplateDataContextType;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.CheckedItems":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "CheckedItems", "System.Collections.ObjectModel.ObservableCollection`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_SfTreeView_CheckedItems;
                xamlMember.Setter = set_51_SfTreeView_CheckedItems;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ShowLines":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ShowLines", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_SfTreeView_ShowLines;
                xamlMember.Setter = set_52_SfTreeView_ShowLines;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.ShowRootLines":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "ShowRootLines", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_SfTreeView_ShowRootLines;
                xamlMember.Setter = set_53_SfTreeView_ShowRootLines;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.LineStroke":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "LineStroke", "Microsoft.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_SfTreeView_LineStroke;
                xamlMember.Setter = set_54_SfTreeView_LineStroke;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.LineStrokeThickness":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "LineStrokeThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_SfTreeView_LineStrokeThickness;
                xamlMember.Setter = set_55_SfTreeView_LineStrokeThickness;
                break;
            case "Syncfusion.UI.Xaml.TreeView.SfTreeView.DragDropController":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.TreeView.SfTreeView");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "DragDropController", "Syncfusion.UI.Xaml.TreeView.TreeViewDragDropController");
                xamlMember.Getter = get_56_SfTreeView_DragDropController;
                xamlMember.Setter = set_56_SfTreeView_DragDropController;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.TrueValue":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "TrueValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_DoubleToObjectConverter_TrueValue;
                xamlMember.Setter = set_57_DoubleToObjectConverter_TrueValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.FalseValue":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "FalseValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_DoubleToObjectConverter_FalseValue;
                xamlMember.Setter = set_58_DoubleToObjectConverter_FalseValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.NullValue":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "NullValue", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_DoubleToObjectConverter_NullValue;
                xamlMember.Setter = set_59_DoubleToObjectConverter_NullValue;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.GreaterThan":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "GreaterThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_60_DoubleToObjectConverter_GreaterThan;
                xamlMember.Setter = set_60_DoubleToObjectConverter_GreaterThan;
                break;
            case "Syncfusion.UI.Xaml.Core.DoubleToObjectConverter.LessThan":
                userType = (global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Syncfusion.UI.Xaml.Core.DoubleToObjectConverter");
                xamlMember = new global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlMember(this, "LessThan", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_61_DoubleToObjectConverter_LessThan;
                xamlMember.Setter = set_61_DoubleToObjectConverter_LessThan;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 0.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Populating_Nodes_with_Bound_mode_UWP.Populating_Nodes_with_Bound_mode_UWP_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

